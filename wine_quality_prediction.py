# -*- coding: utf-8 -*-
"""Wine Quality Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r1SdfMjmuvv9onO0pjU28kPgVAD1Ordp
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn import metrics
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.linear_model import LogisticRegression
import warnings
warnings.filterwarnings('ignore')

df =pd.read_csv('/content/drive/MyDrive/Colab Notebooks/WineQT.csv')
print(df.head())

df.info()

df.describe().T

df.isnull().sum()

for col in df.columns:
  if df[col].isnull().sum() > 0:
    df[col] = df[col].fillna(df[col].mean())

df.isnull().sum().sum()

df.hist(bins=20,figsize=(10,10))
plt.show()

plt.bar(df['quality'],df['alcohol'])
plt.xlabel('quality')
plt.ylabel('alcohol')
plt.show()

plt.figure(figsize=(8,8))
sns.heatmap(df.corr()>0.7,annot=True,cbar=False)
plt.show()

import pandas as pd
df=pd.read_csv('/content/drive/MyDrive/Colab Notebooks/WineQT.csv')

print(df.columns)

df=df.drop('total sulfur dioxide',axis=1)

df['best quality'] = [1 if x>5 else 0 for x in df.quality]

df.replace({'white':1,'red':0},inplace=True)

features = df.drop(['quality','best quality'],axis=1)
target = df['best quality']

x_train,x_test,y_train,y_test =train_test_split(features,target,test_size=0.2,random_state=40)

x_train.shape,x_test.shape

min=MinMaxScaler()
x_train=min.fit_transform(x_train)
x_test=min.transform(x_test)

model=[LogisticRegression(),XGBClassifier(),SVC(kernel='rbf')]

for i in range(3):
	model[i].fit(x_train, y_train)

	print(f'{model[i]} : ')
	print('Training Accuracy : ', metrics.roc_auc_score(y_train, model[i].predict(x_train)))
	print('Validation Accuracy : ', metrics.roc_auc_score(y_test, model[i].predict(x_test)))
	print()

!pip install --upgrade scikit-learn

import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix,ConfusionMatrixDisplay

cm = confusion_matrix(y_test,model[1].predict(x_test))
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot()
plt.show()

print(metrics.classification_report(y_test,model[1].predict(x_test)))





